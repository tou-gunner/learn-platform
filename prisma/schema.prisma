// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("student")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  forumPosts    ForumPost[]
  quizAttempts  QuizAttempt[]
  assignments   AssignmentSubmission[]
  payments      Payment[]
  certificates  Certificate[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  instructorId String
  price       Decimal  @db.Decimal(10, 2)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessons     Lesson[]
  enrollments Enrollment[]
  forumPosts  ForumPost[]
}

model Lesson {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  content   String?
  orderIndex Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  resources Resource[]
  quizzes   Quiz[]
  assignments Assignment[]
}

model Resource {
  id        String   @id @default(cuid())
  lessonId  String
  title     String
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())

  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        String   @id @default(cuid())
  lessonId  String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]
}

model QuizQuestion {
  id           String   @id @default(cuid())
  quizId       String
  question     String
  questionType String
  orderIndex   Int

  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers      QuizAnswer[]
}

model QuizAnswer {
  id         String   @id @default(cuid())
  questionId String
  answerText String
  isCorrect  Boolean

  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Decimal? @db.Decimal(5, 2)
  startedAt   DateTime @default(now())
  completedAt DateTime?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String   @id @default(cuid())
  lessonId    String
  title       String
  description String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]
}

model AssignmentSubmission {
  id           String   @id @default(cuid())
  userId       String
  assignmentId String
  submissionUrl String?
  submittedAt  DateTime @default(now())
  grade        Decimal? @db.Decimal(5, 2)
  feedback     String?

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model ForumPost {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  lessonId     String?
  parentPostId String?
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: SetNull)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parentPost   ForumPost?  @relation("PostReplies", fields: [parentPostId], references: [id], onDelete: Cascade)
  replies      ForumPost[] @relation("PostReplies")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  courseId      String?
  amount        Decimal  @db.Decimal(10, 2)
  status        String
  paymentMethod String?
  transactionId String?
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Certificate {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  issuedAt  DateTime @default(now())
  certificateUrl String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}